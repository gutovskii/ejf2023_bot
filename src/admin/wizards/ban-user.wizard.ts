import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Ctx, Message, Wizard, WizardStep } from 'nestjs-telegraf';
import { ValidateAnswerPipe } from 'src/common/pipes/validate-answer.pipe';
import { MainWizardContext } from 'src/common/types';
import { User } from 'src/register/user.schema';
import { Markup } from 'telegraf';
import { ADMIN_SCENE } from '../admin.scene';
import { userToText } from '../admin.utils';

export interface BanUserWizardContext extends MainWizardContext {
  wizard: {
    state: {
      user: User;
    } & MainWizardContext['wizard']['state'];
  } & MainWizardContext['wizard'];
}

// TODO remove Questionnaire when banned

export const BAN_USER_WIZARD = 'BAN_USER_WIZARD';

@Wizard(BAN_USER_WIZARD)
export class BanUserWizard {
  constructor(
    @InjectModel(User.name)
    private readonly userModel: Model<User>,
  ) {}

  @WizardStep(1)
  async step1(@Ctx() ctx: BanUserWizardContext) {
    await ctx.reply('–£–≤–µ–¥—ñ—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    ctx.wizard.next();
  }

  @WizardStep(2)
  async step2(
    @Message('text') telegramId: string,
    @Ctx() ctx: BanUserWizardContext,
  ) {
    const user = await this.userModel.findOne({ telegramId });
    if (!user) {
      await ctx.reply('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ :(');
      return ctx.scene.enter(ADMIN_SCENE);
    }
    ctx.wizard.state.user = user;
    await ctx.reply(userToText(user));
    await ctx.reply(
      '–ó–∞–±–∞–Ω–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞?',
      Markup.keyboard(
        [Markup.button.text('–¢–∞–∫ üëπ'), Markup.button.text('–ù—ñ ‚ú®')],
        { columns: 2 },
      ).resize(true),
    );
    ctx.wizard.next();
  }

  @WizardStep(3)
  async step3(
    @Message(
      new ValidateAnswerPipe({
        errorMessage: '–û–±–µ—Ä–∏ –Ω–∞–¥–∞–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏',
        validAnswers: ['–¢–∞–∫ üëπ', '–ù—ñ ‚ú®'],
      }),
    )
    conclusion: string,
    @Ctx() ctx: BanUserWizardContext,
  ) {
    if (conclusion === '–ù—ñ ‚ú®') {
      await ctx.reply('–ê –π–æ–º—É –ø–æ–≤–µ–∑–ª–æ üò∞');
      return ctx.scene.enter(ADMIN_SCENE);
    }
    const userToBan = ctx.wizard.state.user;
    userToBan.isBanned = true;
    await this.userModel.updateOne(
      { telegramId: userToBan.telegramId },
      userToBan,
    );
    await ctx.reply(
      `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userToBan.firstname} —É—Å–ø—ñ—à–Ω–æ –∑–ª–æ–≤–∏–≤ –±–∞–Ω–∞–Ω—á–∏–∫ ü©∏ü§óüçå`,
    );
    ctx.scene.enter(ADMIN_SCENE);
  }
}
