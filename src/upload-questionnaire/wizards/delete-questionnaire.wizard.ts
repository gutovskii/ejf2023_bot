import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Ctx, Message, Wizard, WizardStep } from 'nestjs-telegraf';
import { AwsService } from 'src/aws/aws.service';
import { ValidateAnswerPipe } from 'src/common/pipes/validate-answer.pipe';
import { MainWizardContext } from 'src/common/types';
import { Markup } from 'telegraf';
import { Questionnaire } from '../questionnaire.schema';
import { UPLOAD_QUESTIONNAIRE_SCENE } from '../upload-questionnaire.scene';

export const DELETE_QUESTIONNAIRE_WIZARD = 'DELETE_QUESTIONNAIRE_WIZARD';

@Wizard(DELETE_QUESTIONNAIRE_WIZARD)
export class DeleteQuestionnaireWizard {
  constructor(
    @InjectModel(Questionnaire.name)
    private readonly questionnaireModel: Model<Questionnaire>,
    private readonly awsService: AwsService,
  ) {}

  @WizardStep(1)
  async step1(@Ctx() ctx: MainWizardContext) {
    await ctx.reply(
      '–¢–∏ —Ç–æ—á–Ω–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π? –¢–æ –ø—Ä–∏–π–¥–µ—Ç—å—Å—è –Ω–∞–Ω–æ–≤–æ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ ü§î',
      Markup.keyboard(
        [Markup.button.text('–¢–∞–∫ üëª'), Markup.button.text('–ù—ñ üòä')],
        { columns: 2 },
      ).resize(true),
    );
    ctx.wizard.next();
  }

  @WizardStep(2)
  async step2(
    @Message(
      new ValidateAnswerPipe({
        errorMessage: '–û–±–µ—Ä–∏ –Ω–∞–¥–∞–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏',
        validAnswers: ['–¢–∞–∫ üëª', '–ù—ñ üòä'],
      }),
    )
    decision: string,
    @Ctx() ctx: MainWizardContext,
  ) {
    if (decision === '–ù—ñ üòä') {
      await ctx.reply('–ê —Ç–∏ –±—É–≤ –±–ª–∏–∑—å–∫–æ üò¨');
      ctx.scene.enter(UPLOAD_QUESTIONNAIRE_SCENE);
      return;
    }
    try {
      const questionnaire: { key: string } = await this.questionnaireModel
        .findOne({
          user: ctx.session.user,
        })
        .select('key');
      await this.questionnaireModel.deleteOne({ user: ctx.session.user });
      await this.awsService.removeObject(questionnaire.key);
      await ctx.reply('–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞ ‚úÖ');
    } catch (error) {
      await ctx.reply('–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, üò¶ —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑');
    }
    await ctx.scene.enter(UPLOAD_QUESTIONNAIRE_SCENE);
  }
}
